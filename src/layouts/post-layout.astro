---
import '@shikijs/twoslash/style-rich.css';
import '~/styles/mdx.css';

import { type CollectionEntry } from 'astro:content';
import { format } from 'date-fns';

import BaseHeader from '~/components/base-header.astro';
import BaseNav from '~/components/base-nav.astro';
import BasePaginator from '~/components/base-paginator.astro';
import BaseSns from '~/components/base-sns.astro';
import CopyCodeScript from '~/components/copy-code-script.astro';
import CopyRight from '~/components/copy-right.astro';
import DynamicToc from '~/components/dynamic-toc';
import { GiscusSection } from '~/components/giscus';
import MediumZoomScript from '~/components/medium-zoom-script.astro';
import PostImage from '~/components/post/post-image.astro';
import PostRelated from '~/components/post-related.astro';
import TwoslashFloatingScript from '~/components/twoslash-floating-script.astro';
import MainLayout from '~/layouts/main-layout.astro';
import {
  defaultLang,
  getDefaultPathname,
  type Language,
  translatePath,
} from '~/libs/i18n';
import { contentToDescription, getPostType } from '~/libs/mdx';

export type Props = {
  lang: Language;
  post: CollectionEntry<'post'>;
  prevPost: CollectionEntry<'post'>;
  nextPost: CollectionEntry<'post'>;
  relatedPostList: CollectionEntry<'post'>[];
  noI18n?: boolean;
};

const { lang, post, prevPost, nextPost, relatedPostList, noI18n } = Astro.props;

const postType = getPostType(post);
const { title, date, updatedDate, tags } = post.data;
const description = post.data.description || contentToDescription(post.body);

const { Content } = await post.render();

const i18nJsonLd = noI18n
  ? null
  : lang === defaultLang
    ? {
        workTranslation: [
          {
            '@type': 'BlogPosting',
            '@id': new URL(
              translatePath(Astro.url.pathname, 'en'),
              Astro.site,
            ).toString(),
            inLanguage: 'en',
          },
        ],
      }
    : {
        translationOfWork: {
          '@type': 'BlogPosting',
          '@id': new URL(
            getDefaultPathname(Astro.url.pathname),
            Astro.site,
          ).toString(),
          inLanguage: 'ko',
        },
      };
---

<MainLayout
  pagefind
  seo={{
    title,
    description,
    image: `/og/${post.slug}.png`,
    jsonLd: {
      '@type': 'BlogPosting',
      datePublished: date.toISOString(),
      ...(updatedDate && {
        dateModified: updatedDate.toISOString(),
      }),
      keywords: tags ?? [],
      mainEntityOfPage: {
        '@type': 'WebPage',
        '@id': new URL(Astro.url.pathname, Astro.site).toString(),
      },
      ...i18nJsonLd,
    },
  }}
>
  <BaseHeader {title} description={format(date, 'MMM dd, yyyy')} {noI18n}>
    <BaseNav class="mt-1.5" highlightNavItem={postType} />
  </BaseHeader>
  <article class="mdx mt-14">
    <Content components={{ img: PostImage }} />
  </article>
  <footer>
    <CopyRight class="mt-page text-right text-xs" />
    <div class="my-7 rounded-lg border border-dashed px-4 py-7 md:px-7">
      <BaseNav highlightNavItem={postType} />
      <BaseSns class="mt-1.5 -ml-1" />
    </div>
    <BasePaginator class="my-7" {prevPost} {nextPost} />
    <PostRelated class="mt-7 mb-14" {relatedPostList} />
    <GiscusSection className="my-half-page mx-auto" {lang} client:load />
  </footer>
  <MediumZoomScript />
  <TwoslashFloatingScript />
  <CopyCodeScript />
  <DynamicToc client:only="react" {title} />
</MainLayout>
